{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/lucas/Projetos/cursos/gobarber v2/mobile/src/components/Input/index.tsx\";\n\nimport React, { useRef, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { useField } from '@unform/core';\nimport { Container, TextInput, Icon } from \"./styles\";\n\nvar Input = function Input(_ref, ref) {\n  var name = _ref.name,\n      icon = _ref.icon,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"icon\"]);\n\n  var inputElementRef = useRef(null);\n\n  var _useField = useField(name),\n      registerField = _useField.registerField,\n      _useField$defaultValu = _useField.defaultValue,\n      defaultValue = _useField$defaultValu === void 0 ? '' : _useField$defaultValu,\n      fieldName = _useField.fieldName,\n      error = _useField.error;\n\n  var inputValueRef = useRef({\n    value: defaultValue\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        inputElementRef.current.focus();\n      }\n    };\n  });\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: inputValueRef.current,\n      path: 'value',\n      setValue: function setValue(ref, value) {\n        inputValueRef.current.value = value;\n        inputElementRef.current.setNativeProps({\n          text: value\n        });\n      },\n      clearValue: function clearValue() {\n        inputValueRef.current.value = '';\n        inputElementRef.current.clear();\n      }\n    });\n  }, [fieldName, registerField]);\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, React.createElement(Icon, {\n    name: icon,\n    size: 20,\n    color: \"#666360\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, _extends({\n    placeholderTextColor: \"#666360\"\n  }, rest, {\n    defaultValue: defaultValue,\n    onChangeText: function onChangeText(value) {\n      inputValueRef.current.value = value;\n    }\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default forwardRef(Input);","map":{"version":3,"sources":["/home/lucas/Projetos/cursos/gobarber v2/mobile/src/components/Input/index.tsx"],"names":["React","useRef","useEffect","useImperativeHandle","forwardRef","useField","Container","TextInput","Icon","Input","ref","name","icon","rest","inputElementRef","registerField","defaultValue","fieldName","error","inputValueRef","value","focus","current","path","setValue","setNativeProps","text","clearValue","clear"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,SAFF,EAGEC,mBAHF,EAIEC,UAJF,QAKO,OALP;AAOA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,IAA/B;;AAeA,IAAMC,KAAgE,GAAG,SAAnEA,KAAmE,OAEvEC,GAFuE,EAGpE;AAAA,MAFDC,IAEC,QAFDA,IAEC;AAAA,MAFKC,IAEL,QAFKA,IAEL;AAAA,MAFcC,IAEd;;AACH,MAAMC,eAAe,GAAGb,MAAM,CAAM,IAAN,CAA9B;;AADG,kBAE4DI,QAAQ,CAACM,IAAD,CAFpE;AAAA,MAEKI,aAFL,aAEKA,aAFL;AAAA,wCAEoBC,YAFpB;AAAA,MAEoBA,YAFpB,sCAEmC,EAFnC;AAAA,MAEuCC,SAFvC,aAEuCA,SAFvC;AAAA,MAEkDC,KAFlD,aAEkDA,KAFlD;;AAGH,MAAMC,aAAa,GAAGlB,MAAM,CAAkB;AAAEmB,IAAAA,KAAK,EAAEJ;AAAT,GAAlB,CAA5B;AAEAb,EAAAA,mBAAmB,CAACO,GAAD,EAAM;AAAA,WAAO;AAC9BW,MAAAA,KAD8B,mBACtB;AACNP,QAAAA,eAAe,CAACQ,OAAhB,CAAwBD,KAAxB;AACD;AAH6B,KAAP;AAAA,GAAN,CAAnB;AAMAnB,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,aAAa,CAAS;AACpBJ,MAAAA,IAAI,EAAEM,SADc;AAEpBP,MAAAA,GAAG,EAAES,aAAa,CAACG,OAFC;AAGpBC,MAAAA,IAAI,EAAE,OAHc;AAIpBC,MAAAA,QAJoB,oBAIXd,GAJW,EAIDU,KAJC,EAIM;AACxBD,QAAAA,aAAa,CAACG,OAAd,CAAsBF,KAAtB,GAA8BA,KAA9B;AACAN,QAAAA,eAAe,CAACQ,OAAhB,CAAwBG,cAAxB,CAAuC;AAAEC,UAAAA,IAAI,EAAEN;AAAR,SAAvC;AACD,OAPmB;AAQpBO,MAAAA,UARoB,wBAQP;AACXR,QAAAA,aAAa,CAACG,OAAd,CAAsBF,KAAtB,GAA8B,EAA9B;AACAN,QAAAA,eAAe,CAACQ,OAAhB,CAAwBM,KAAxB;AACD;AAXmB,KAAT,CAAb;AAaD,GAdQ,EAcN,CAACX,SAAD,EAAYF,aAAZ,CAdM,CAAT;AAeA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEH,IAAZ;AAAkB,IAAA,IAAI,EAAE,EAAxB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,SAAD;AACE,IAAA,oBAAoB,EAAC;AADvB,KAEMC,IAFN;AAGE,IAAA,YAAY,EAAEG,YAHhB;AAIE,IAAA,YAAY,EAAE,sBAACI,KAAD,EAAW;AACvBD,MAAAA,aAAa,CAACG,OAAd,CAAsBF,KAAtB,GAA8BA,KAA9B;AACD;AANH,KAOMP,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,CADF;AAeD,CA5CD;;AA8CA,eAAeT,UAAU,CAACK,KAAD,CAAzB","sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useImperativeHandle,\n  forwardRef,\n} from 'react';\nimport { TextInputProps } from 'react-native';\nimport { useField } from '@unform/core';\n\nimport { Container, TextInput, Icon } from './styles';\n\ninterface InputProps extends TextInputProps {\n  name: string;\n  icon: string;\n}\n\ninterface InputValueProps {\n  value: string;\n}\n\ninterface InputRefProps {\n  focus(): void;\n}\n\nconst Input: React.ForwardRefRenderFunction<InputRefProps, InputProps> = (\n  { name, icon, ...rest },\n  ref,\n) => {\n  const inputElementRef = useRef<any>(null);\n  const { registerField, defaultValue = '', fieldName, error } = useField(name);\n  const inputValueRef = useRef<InputValueProps>({ value: defaultValue });\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      inputElementRef.current.focus();\n    },\n  }));\n\n  useEffect(() => {\n    registerField<string>({\n      name: fieldName,\n      ref: inputValueRef.current,\n      path: 'value',\n      setValue(ref: any, value) {\n        inputValueRef.current.value = value;\n        inputElementRef.current.setNativeProps({ text: value });\n      },\n      clearValue() {\n        inputValueRef.current.value = '';\n        inputElementRef.current.clear();\n      },\n    });\n  }, [fieldName, registerField]);\n  return (\n    <Container>\n      <Icon name={icon} size={20} color=\"#666360\" />\n\n      <TextInput\n        placeholderTextColor=\"#666360\"\n        {...rest}\n        defaultValue={defaultValue}\n        onChangeText={(value) => {\n          inputValueRef.current.value = value;\n        }}\n        {...rest}\n      />\n    </Container>\n  );\n};\n\nexport default forwardRef(Input);\n"]},"metadata":{},"sourceType":"module"}